import { NextResponse } from 'next/server';
import { headers } from 'next/headers';

type Body = {
  name: string;
  email: string;
  phone: string;
  service: string;
  budget: string;
  consent: boolean;
  company?: string;
  website?: string;
  message?: string;
  utm_source?: string;
  utm_medium?: string;
  utm_campaign?: string;
  timestamp?: string;
};

const verifyEnvironmentVars = () => {
  const requiredVars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_ADMIN_ID'];
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`);
  }
};

export async function POST(req: Request) {
  try {
    // Verify environment variables
    verifyEnvironmentVars();
    
    const body = (await req.json()) as Body;
    const { name, email, phone, service, budget, consent } = body;
    
    // Validate required fields
    if (!name || !email || !phone || !service || !budget || !consent) {
      return NextResponse.json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, { status: 400 });
    }

    const token = process.env.TELEGRAM_BOT_TOKEN!;
    const adminId = process.env.TELEGRAM_ADMIN_ID!;

    // Get request metadata
    const headersList = headers();
    const userAgent = headersList.get('user-agent') || 'Unknown';
    const ip = headersList.get('x-forwarded-for') || headersList.get('x-real-ip') || 'Unknown';

    const lines = [
      `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞`,
      `\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`,
      `‚Ä¢ –ò–º—è: ${body.name}`,
      `‚Ä¢ Email: ${body.email}`,
      `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}`,
      `‚Ä¢ –£—Å–ª—É–≥–∞: ${body.service}`,
      `‚Ä¢ –ë—é–¥–∂–µ—Ç: ${body.budget}`,
      body.company ? `‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${body.company}` : undefined,
      body.website ? `‚Ä¢ –°–∞–π—Ç: ${body.website}` : undefined,
      body.message ? `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${body.message}` : undefined,
      `\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`,
      body.utm_source ? `‚Ä¢ UTM –∏—Å—Ç–æ—á–Ω–∏–∫: ${body.utm_source}` : undefined,
      body.utm_medium ? `‚Ä¢ UTM –∫–∞–Ω–∞–ª: ${body.utm_medium}` : undefined,
      body.utm_campaign ? `‚Ä¢ UTM –∫–∞–º–ø–∞–Ω–∏—è: ${body.utm_campaign}` : undefined,
      `‚Ä¢ User Agent: ${userAgent}`,
      `‚Ä¢ IP: ${ip}`,
      `‚Ä¢ –î–∞—Ç–∞: ${body.timestamp || new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`,
      `\n‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: ${body.consent ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ù–µ—Ç'}`
    ].filter(Boolean).join('\n');

    const res = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: adminId, text: lines })
    });

    if (!res.ok) {
      const text = await res.text();
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ Telegram', details: text }, { status: 500 });
    }

    const data = await res.json();
    return NextResponse.json({ success: true, messageId: data?.result?.message_id });
  } catch (e) {
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}








