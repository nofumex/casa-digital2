import { NextResponse } from 'next/server';
import { headers } from 'next/headers';

type ContactBody = {
  name: string;
  email: string;
  phone: string;
  message: string;
  service?: string;
  budget?: string;
  company?: string;
  website?: string;
  consent?: boolean;
  utm_source?: string;
  utm_medium?: string;
  utm_campaign?: string;
};

const verifyEnvironmentVars = () => {
  const requiredVars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_ADMIN_ID'];
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.error(`Missing required environment variables: ${missingVars.join(', ')}`);
    throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`);
  }
};

export async function POST(req: Request) {
  try {
    // Verify environment variables
    verifyEnvironmentVars();
    
    const body = (await req.json()) as ContactBody;
    const { name, email, phone, message } = body;
    
    // Validate required fields
    if (!name || !email || !phone || !message) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, 
        { status: 400 }
      );
    }

    const token = process.env.TELEGRAM_BOT_TOKEN!;
    const adminId = process.env.TELEGRAM_ADMIN_ID!;

    // Get request metadata
    const headersList = headers();
    const userAgent = headersList.get('user-agent') || 'Unknown';
    const ip = headersList.get('x-forwarded-for') || headersList.get('x-real-ip') || 'Unknown';

    // Format message for Telegram
    const lines = [
      `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞`,
      `\nüìã –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`,
      `‚Ä¢ –ò–º—è: ${name}`,
      `‚Ä¢ Email: ${email}`,
      `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`,
      body.service ? `‚Ä¢ –£—Å–ª—É–≥–∞: ${body.service}` : undefined,
      body.budget ? `‚Ä¢ –ë—é–¥–∂–µ—Ç: ${body.budget}` : undefined,
      body.company ? `‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${body.company}` : undefined,
      body.website ? `‚Ä¢ –°–∞–π—Ç: ${body.website}` : undefined,
      `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:`,
      message,
      `\nüìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`,
      body.utm_source ? `‚Ä¢ UTM –∏—Å—Ç–æ—á–Ω–∏–∫: ${body.utm_source}` : undefined,
      body.utm_medium ? `‚Ä¢ UTM –∫–∞–Ω–∞–ª: ${body.utm_medium}` : undefined,
      body.utm_campaign ? `‚Ä¢ UTM –∫–∞–º–ø–∞–Ω–∏—è: ${body.utm_campaign}` : undefined,
      `‚Ä¢ User Agent: ${userAgent}`,
      `‚Ä¢ IP: ${ip}`,
      `‚Ä¢ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`,
      body.consent ? `\n‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: –ü–æ–ª—É—á–µ–Ω–æ` : undefined
    ].filter(Boolean).join('\n');

    // Send to Telegram
    const res = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        chat_id: adminId, 
        text: lines,
        parse_mode: 'HTML'
      })
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error('Telegram API error:', errorText);
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.' }, 
        { status: 503 }
      );
    }

    const data = await res.json();
    return NextResponse.json({ 
      success: true, 
      messageId: data?.result?.message_id 
    });
    
  } catch (error) {
    console.error('Contact form error:', error);
    
    // Check if it's a missing env vars error
    if (error instanceof Error && error.message.includes('Missing required environment variables')) {
      return NextResponse.json(
        { error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ WhatsApp.' },
        { status: 503 }
      );
    }
    
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
      { status: 500 }
    );
  }
}
